// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

//datasource db {
  //provider     = "mysql"
  //url          = env("DATABASE_URL")
  //relationMode = "prisma"
//}


datasource db {
  provider     = "sqlite"
  url          = "file:./database.db"
  relationMode = "prisma"
}

model Amenity {
  id   String @id @default(uuid()) 
  name String

  Property Property[]
}

model Booking {
  id              String   @id @default(uuid())
  userId          String
  propertyId      String
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Int
  bookingStatus   String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Host {
  id              String   @id @default(uuid())
  username        String   @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture  String?
  aboutMe         String?
  properties      Property[]
}

model Property {
  id            String     @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  hostId        String
  rating        Float?
  host          Host       @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookings      Booking[]
  reviews       Review[]
  amenities     Amenity[]

  @@index([hostId])
}

model Review {
  id          String     @id @default(uuid())
  userId      String
  propertyId  String
  rating      Float
  comment     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String 
  phoneNumber    String
  profilePicture String?
  bookings       Booking[]
  reviews        Review[]
}
